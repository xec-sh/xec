# Xec Unified Configuration Example
# Place this file at ~/.xec/config.yaml or ./.xec/config.yaml
#
# This configuration uses the unified format that works with both
# the CLI and core library.

# Meta information
name: "My Infrastructure"
description: "Configuration for development and production environments"
version: "1.0"

# Default settings for all commands
defaults:
  timeout: 30s
  shell: /bin/bash
  cwd: "."
  throwOnNonZeroExit: true

# SSH hosts configuration
hosts:
  # Production server
  prod:
    host: production.example.com
    username: deploy
    privateKey: ~/.ssh/id_rsa_prod
    port: 22
    
  # Staging server
  staging:
    host: staging.example.com
    username: ubuntu
    privateKey: ~/.ssh/id_rsa
    
  # Development servers (can use wildcards)
  dev-1:
    host: dev1.example.com
    username: developer
    
  dev-2:
    host: dev2.example.com
    username: developer

# Docker containers configuration
containers:
  # Application container
  app:
    name: myapp-production
    
  # Database container
  db:
    name: postgres-main
    
  # Redis container
  cache:
    name: redis-cache

# Kubernetes pods configuration  
pods:
  # Web application pods
  web:
    name: web-deployment-*
    namespace: production
    
  # API pods
  api:
    name: api-deployment-*
    namespace: production
    container: api
    
  # Debug pod
  debug:
    name: debug-tools
    namespace: default

# Command aliases for common operations
aliases:
  # Deployment commands
  deploy-prod: "xec on prod ./deploy.sh --env production"
  deploy-staging: "xec on staging ./deploy.sh --env staging"
  
  # Log viewing
  logs-app: "xec in app tail -f /var/log/app.log"
  logs-nginx: "xec in pod:web -c nginx tail -f /var/log/nginx/access.log"
  
  # Status checks
  status: "xec on prod,staging uptime --parallel"
  health: "xec in app,db,cache echo 'OK' --parallel"
  
  # Database operations
  db-backup: "xec in db pg_dump -U postgres myapp > backup.sql"
  db-restore: "xec in db psql -U postgres myapp < backup.sql"

# Note: Environment-specific configurations have been migrated to profiles
# Use profiles with the 'env-' prefix for environment-specific settings

# Profiles for different use cases
profiles:
  # Developer profile
  dev:
    adapter: local
    env:
      NODE_ENV: development
      DEBUG: "*"
      
  # Operations profile
  ops:
    adapter: ssh
    defaultHost: prod
    timeout: 120s
    
  # CI/CD profile
  ci:
    adapter: docker
    env:
      CI: "true"
      NODE_ENV: test