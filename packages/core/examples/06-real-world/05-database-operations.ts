/**
 * 05. Database Operations - –û–ø–µ—Ä–∞—Ü–∏–∏ —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
 * 
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
 */

import * as path from 'path';
import * as fs from 'fs/promises';
import { $, withTempDir } from '@xec-sh/core';

// 1. –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
async function databaseBackup(config: BackupConfig) {
  console.log('\n=== –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ===\n');
  console.log(`–ë–∞–∑–∞: ${config.database}`);
  console.log(`–¢–∏–ø: ${config.type}`);
  
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
  const backupName = `${config.database}-${timestamp}`;
  
  try {
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –±—ç–∫–∞–ø–æ–≤
    await $`mkdir -p ${config.backupPath}`;
    
    let backupFile: string;
    
    switch (config.type) {
      case 'postgresql':
        backupFile = await backupPostgreSQL(config, backupName);
        break;
      case 'mysql':
        backupFile = await backupMySQL(config, backupName);
        break;
      case 'mongodb':
        backupFile = await backupMongoDB(config, backupName);
        break;
      default:
        throw new Error(`Unsupported database type: ${config.type}`);
    }
    
    // –°–∂–∏–º–∞–µ–º –±—ç–∫–∞–ø
    console.log('\nüì¶ –°–∂–∞—Ç–∏–µ –±—ç–∫–∞–ø–∞...');
    const compressedFile = `${backupFile}.gz`;
    await $`gzip -9 ${backupFile}`;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä
    const stats = await fs.stat(compressedFile);
    console.log(`‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: ${path.basename(compressedFile)}`);
    console.log(`   –†–∞–∑–º–µ—Ä: ${formatBytes(stats.size)}`);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ –æ–±–ª–∞–∫–æ (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ)
    if (config.uploadToCloud) {
      await uploadBackupToCloud(compressedFile, config.cloudStorage);
    }
    
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã
    await cleanupOldBackups(config.backupPath, config.retentionDays);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    await sendBackupNotification(config, {
      status: 'success',
      file: compressedFile,
      size: stats.size,
      duration: Date.now() - Date.parse(timestamp)
    });
    
    return compressedFile;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
    
    await sendBackupNotification(config, {
      status: 'failed',
      error: error.message
    });
    
    throw error;
  }
}

async function backupPostgreSQL(config: BackupConfig, backupName: string): Promise<string> {
  console.log('\nüêò PostgreSQL –±—ç–∫–∞–ø...');
  
  const backupFile = path.join(config.backupPath, `${backupName}.sql`);
  const $pg = $.with({
    env: {
      PGPASSWORD: config.password,
      PGHOST: config.host,
      PGPORT: config.port || '5432',
      PGUSER: config.username
    }
  });
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
  await $pg`pg_isready`;
  
  // –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
  console.log('–°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–º–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
  
  if (config.includeLargeObjects) {
    // –ü–æ–ª–Ω—ã–π –±—ç–∫–∞–ø —Å –±–æ–ª—å—à–∏–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏
    await $pg`pg_dump -d ${config.database} -b -v -f ${backupFile}`;
  } else {
    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –±—ç–∫–∞–ø
    await $pg`pg_dump -d ${config.database} -v -f ${backupFile}`;
  }
  
  console.log('‚úÖ –î–∞–º–ø —Å–æ–∑–¥–∞–Ω');
  
  // –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø —Ä–æ–ª–µ–π (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
  if (config.includeRoles) {
    const rolesFile = path.join(config.backupPath, `${backupName}-roles.sql`);
    await $pg`pg_dumpall -r -f ${rolesFile}`;
    console.log('‚úÖ –†–æ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
  }
  
  return backupFile;
}

async function backupMySQL(config: BackupConfig, backupName: string): Promise<string> {
  console.log('\nüê¨ MySQL –±—ç–∫–∞–ø...');
  
  const backupFile = path.join(config.backupPath, `${backupName}.sql`);
  
  // –°–æ–∑–¥–∞–µ–º –æ–ø—Ü–∏–∏ –¥–ª—è mysqldump
  const options = [
    `--host=${config.host}`,
    `--port=${config.port || 3306}`,
    `--user=${config.username}`,
    `--password=${config.password}`,
    '--single-transaction',
    '--routines',
    '--triggers'
  ];
  
  if (config.includeLargeObjects) {
    options.push('--hex-blob');
  }
  
  console.log('–°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–º–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
  
  await $`mysqldump ${options} ${config.database} > ${backupFile}`;
  
  console.log('‚úÖ –î–∞–º–ø —Å–æ–∑–¥–∞–Ω');
  
  return backupFile;
}

async function backupMongoDB(config: BackupConfig, backupName: string): Promise<string> {
  console.log('\nüçÉ MongoDB –±—ç–∫–∞–ø...');
  
  const backupDir = path.join(config.backupPath, backupName);
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º URI –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  const authPart = config.username ? `${config.username}:${config.password}@` : '';
  const uri = `mongodb://${authPart}${config.host}:${config.port || 27017}/${config.database}`;
  
  console.log('–°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–º–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
  
  await $`mongodump --uri="${uri}" --out="${backupDir}"`;
  
  console.log('‚úÖ –î–∞–º–ø —Å–æ–∑–¥–∞–Ω');
  
  // –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
  const archiveFile = `${backupDir}.tar`;
  await $`tar -cf ${archiveFile} -C ${config.backupPath} ${backupName}`;
  await $`rm -rf ${backupDir}`;
  
  return archiveFile;
}

// 2. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –±—ç–∫–∞–ø–∞
async function databaseRestore(config: RestoreConfig) {
  console.log('\n=== –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ===\n');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª –±—ç–∫–∞–ø–∞
  try {
    await fs.access(config.backupFile);
  } catch {
    throw new Error(`–§–∞–π–ª –±—ç–∫–∞–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${config.backupFile}`);
  }
  
  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
  if (!config.force) {
    // –í @xec-sh/core –Ω–µ—Ç interactive, –ø—Ä–æ—Å—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º
    console.log(`‚ö†Ô∏è  –í–Ω–∏–º–∞–Ω–∏–µ: –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã ${config.database} –∏–∑ –±—ç–∫–∞–ø–∞.`);
    console.log('–í—Å–µ —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã!');
    console.log('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä force: true –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.');
    const confirm = false; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç–º–µ–Ω—è–µ–º
    
    if (!confirm) {
      console.log('–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ');
      return;
    }
  }
  
  // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏
  return await withTempDir(async (tmpDir) => {
    let sqlFile = config.backupFile;
    
    // –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (config.backupFile.endsWith('.gz')) {
      console.log('üì¶ –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –±—ç–∫–∞–ø–∞...');
      sqlFile = path.join(tmpDir.path, path.basename(config.backupFile, '.gz'));
      await $`gunzip -c ${config.backupFile} > ${sqlFile}`;
    } else if (config.backupFile.endsWith('.tar')) {
      console.log('üì¶ –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∞—Ä—Ö–∏–≤–∞...');
      await $`tar -xf ${config.backupFile} -C ${tmpDir.path}`;
      // –ù–∞—Ö–æ–¥–∏–º SQL —Ñ–∞–π–ª –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
      const files = await fs.readdir(tmpDir.path);
      sqlFile = path.join(tmpDir.path, files[0]);
    }
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ë–î
    switch (config.type) {
      case 'postgresql':
        await restorePostgreSQL(config, sqlFile);
        break;
      case 'mysql':
        await restoreMySQL(config, sqlFile);
        break;
      case 'mongodb':
        await restoreMongoDB(config, sqlFile);
        break;
    }
    
    console.log('\n‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!');
  });
}

async function restorePostgreSQL(config: RestoreConfig, sqlFile: string) {
  console.log('\nüêò –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ PostgreSQL...');
  
  const $pg = $.with({
    env: {
      PGPASSWORD: config.password,
      PGHOST: config.host,
      PGPORT: config.port || '5432',
      PGUSER: config.username
    }
  });
  
  // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
  if (config.dropExisting) {
    console.log('–£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –±–∞–∑—ã...');
    await $pg`dropdb --if-exists ${config.database}`;
    await $pg`createdb ${config.database}`;
  }
  
  // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
  const spinner = interactive.spinner('–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...');
  spinner.start();
  
  await $pg`psql -d ${config.database} -f ${sqlFile}`;
  
  spinner.succeed('–î–∞–Ω–Ω—ã–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—ã
  console.log('–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü...');
  await $pg`vacuumdb -d ${config.database} -z`;
}

async function restoreMySQL(config: RestoreConfig, sqlFile: string) {
  console.log('\nüê¨ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ MySQL...');
  
  const mysqlAuth = [
    `--host=${config.host}`,
    `--port=${config.port || 3306}`,
    `--user=${config.username}`,
    `--password=${config.password}`
  ];
  
  // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
  if (config.dropExisting) {
    console.log('–£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –±–∞–∑—ã...');
    await $`mysql ${mysqlAuth} -e "DROP DATABASE IF EXISTS ${config.database}"`;
    await $`mysql ${mysqlAuth} -e "CREATE DATABASE ${config.database}"`;
  }
  
  // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
  const spinner = interactive.spinner('–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...');
  spinner.start();
  
  await $`mysql ${mysqlAuth} ${config.database} < ${sqlFile}`;
  
  spinner.succeed('–î–∞–Ω–Ω—ã–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
}

async function restoreMongoDB(config: RestoreConfig, dumpDir: string) {
  console.log('\nüçÉ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ MongoDB...');
  
  const authPart = config.username ? `${config.username}:${config.password}@` : '';
  const uri = `mongodb://${authPart}${config.host}:${config.port || 27017}/${config.database}`;
  
  const spinner = interactive.spinner('–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...');
  spinner.start();
  
  const options = [`--uri="${uri}"`];
  if (config.dropExisting) {
    options.push('--drop');
  }
  
  await $`mongorestore ${options} ${dumpDir}`;
  
  spinner.succeed('–î–∞–Ω–Ω—ã–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
}

// 3. –ú–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function runDatabaseMigrations(config: MigrationConfig) {
  console.log('\n=== –ú–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ===\n');
  
  // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–∏–≥—Ä–∞—Ü–∏–π
  const pendingMigrations = await getPendingMigrations(config);
  
  if (pendingMigrations.length === 0) {
    console.log('‚úÖ –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã');
    return;
  }
  
  console.log(`–ù–∞–π–¥–µ–Ω–æ ${pendingMigrations.length} –Ω–æ–≤—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π:`);
  pendingMigrations.forEach(m => console.log(`  - ${m.name}`));
  
  // –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø –ø–µ—Ä–µ–¥ –º–∏–≥—Ä–∞—Ü–∏–µ–π
  if (config.backupBeforeMigration) {
    console.log('\nüì¶ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –ø–µ—Ä–µ–¥ –º–∏–≥—Ä–∞—Ü–∏–µ–π...');
    const backupConfig: BackupConfig = {
      ...config,
      backupPath: path.join(config.migrationsPath, 'backups')
    };
    await databaseBackup(backupConfig);
  }
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
  // –í @xec-sh/core –Ω–µ—Ç progress, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  let applied = 0;
  const results = [];
  
  for (const migration of pendingMigrations) {
    try {
      await applyMigration(config, migration);
      results.push({ migration: migration.name, status: 'success' });
      applied++;
      process.stdout.write(`\r–ü—Ä–∏–º–µ–Ω–µ–Ω–æ –º–∏–≥—Ä–∞—Ü–∏–π: ${applied}/${pendingMigrations.length}`);
    } catch (error) {
      results.push({ migration: migration.name, status: 'failed', error: error.message });
      console.log(''); // –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
      
      if (config.stopOnError) {
        console.error(`\n‚ùå –û—à–∏–±–∫–∞ –≤ –º–∏–≥—Ä–∞—Ü–∏–∏ ${migration.name}:`, error.message);
        
        // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if (config.rollbackOnError) {
          await rollbackMigrations(config, results.filter(r => r.status === 'success').map(r => r.migration));
        }
        
        throw error;
      }
    }
  }
  
  progressBar.stop();
  
  // –û—Ç—á–µ—Ç
  console.log('\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∏–≥—Ä–∞—Ü–∏–∏:');
  results.forEach(r => {
    const icon = r.status === 'success' ? '‚úÖ' : '‚ùå';
    console.log(`${icon} ${r.migration}`);
    if (r.error) {
      console.log(`   –û—à–∏–±–∫–∞: ${r.error}`);
    }
  });
}

async function getPendingMigrations(config: MigrationConfig): Promise<Migration[]> {
  // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–π
  const files = await fs.readdir(config.migrationsPath);
  const migrationFiles = files
    .filter(f => f.endsWith('.sql'))
    .sort();
  
  // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏
  const appliedMigrations = await getAppliedMigrations(config);
  
  // –ù–∞—Ö–æ–¥–∏–º –Ω–æ–≤—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏
  const pendingMigrations = migrationFiles
    .filter(f => !appliedMigrations.includes(f))
    .map(f => ({
      name: f,
      path: path.join(config.migrationsPath, f)
    }));
  
  return pendingMigrations;
}

async function getAppliedMigrations(config: MigrationConfig): Promise<string[]> {
  const $db = getDatabaseClient(config);
  
  // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –º–∏–≥—Ä–∞—Ü–∏–π –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  await createMigrationsTable($db, config);
  
  // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π
  let result;
  switch (config.type) {
    case 'postgresql':
      result = await $db`psql -d ${config.database} -t -c "SELECT migration_name FROM migrations ORDER BY applied_at"`;
      break;
    case 'mysql':
      result = await $db`mysql ${config.database} -N -e "SELECT migration_name FROM migrations ORDER BY applied_at"`;
      break;
  }
  
  return result.stdout
    .trim()
    .split('\n')
    .filter(Boolean)
    .map(line => line.trim());
}

async function createMigrationsTable($db: any, config: MigrationConfig) {
  const createTableSQL = `
    CREATE TABLE IF NOT EXISTS migrations (
      id SERIAL PRIMARY KEY,
      migration_name VARCHAR(255) UNIQUE NOT NULL,
      applied_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );
  `;
  
  switch (config.type) {
    case 'postgresql':
      await $db`psql -d ${config.database} -c "${createTableSQL}"`;
      break;
    case 'mysql':
      await $db`mysql ${config.database} -e "${createTableSQL}"`;
      break;
  }
}

async function applyMigration(config: MigrationConfig, migration: Migration) {
  console.log(`\n‚ö° –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ ${migration.name}...`);
  
  const $db = getDatabaseClient(config);
  const migrationContent = await fs.readFile(migration.path, 'utf-8');
  
  // –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
  const transaction = wrapInTransaction(migrationContent, config.type);
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
  switch (config.type) {
    case 'postgresql':
      await $db`psql -d ${config.database} -c "${transaction}"`;
      break;
    case 'mysql':
      await $db`mysql ${config.database} -e "${transaction}"`;
      break;
  }
  
  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É –º–∏–≥—Ä–∞—Ü–∏–π
  const recordSQL = `INSERT INTO migrations (migration_name) VALUES ('${migration.name}')`;
  
  switch (config.type) {
    case 'postgresql':
      await $db`psql -d ${config.database} -c "${recordSQL}"`;
      break;
    case 'mysql':
      await $db`mysql ${config.database} -e "${recordSQL}"`;
      break;
  }
}

function wrapInTransaction(sql: string, dbType: string): string {
  switch (dbType) {
    case 'postgresql':
      return `BEGIN;\n${sql}\nCOMMIT;`;
    case 'mysql':
      return `START TRANSACTION;\n${sql}\nCOMMIT;`;
    default:
      return sql;
  }
}

async function rollbackMigrations(config: MigrationConfig, migrations: string[]) {
  console.log('\nüîÑ –û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–π...');
  
  for (const migrationName of migrations.reverse()) {
    console.log(`  –û—Ç–∫–∞—Ç ${migrationName}...`);
    
    // –ò—â–µ–º —Ñ–∞–π–ª –æ—Ç–∫–∞—Ç–∞
    const rollbackFile = migrationName.replace('.sql', '.rollback.sql');
    const rollbackPath = path.join(config.migrationsPath, rollbackFile);
    
    try {
      await fs.access(rollbackPath);
      
      const migration: Migration = {
        name: rollbackFile,
        path: rollbackPath
      };
      
      await applyMigration(config, migration);
      
      // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –º–∏–≥—Ä–∞—Ü–∏–∏
      const $db = getDatabaseClient(config);
      const deleteSQL = `DELETE FROM migrations WHERE migration_name = '${migrationName}'`;
      
      switch (config.type) {
        case 'postgresql':
          await $db`psql -d ${config.database} -c "${deleteSQL}"`;
          break;
        case 'mysql':
          await $db`mysql ${config.database} -e "${deleteSQL}"`;
          break;
      }
      
    } catch (error) {
      console.error(`  ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –æ—Ç–∫–∞—Ç–∞ –¥–ª—è ${migrationName}`);
    }
  }
}

// 4. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ë–î
async function monitorDatabasePerformance(config: DatabaseConfig) {
  console.log('\n=== –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ë–î ===\n');
  
  const interval = 5000; // 5 —Å–µ–∫—É–Ω–¥
  const duration = 60000; // 1 –º–∏–Ω—É—Ç–∞
  
  const startTime = Date.now();
  const metrics = [];
  
  while (Date.now() - startTime < duration) {
    const metric = await collectDatabaseMetrics(config);
    metrics.push(metric);
    
    // –í—ã–≤–æ–¥–∏–º —Ç–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
    console.clear();
    console.log('=== –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ë–î ===\n');
    console.log(`–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${metric.activeConnections}`);
    console.log(`–ó–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É: ${metric.queriesPerSecond}`);
    console.log(`–°—Ä–µ–¥–Ω—è—è –∑–∞–¥–µ—Ä–∂–∫–∞: ${metric.avgLatency}ms`);
    console.log(`–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏: ${metric.locks}`);
    
    if (config.type === 'postgresql') {
      console.log(`\n–¢–æ–ø –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –≤—Ä–µ–º–µ–Ω–∏:`);
      metric.slowQueries.forEach((q, i) => {
        console.log(`${i + 1}. ${q.duration}ms - ${q.query.substring(0, 50)}...`);
      });
    }
    
    await new Promise(resolve => setTimeout(resolve, interval));
  }
  
  // –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  analyzeDatabaseMetrics(metrics);
}

async function collectDatabaseMetrics(config: DatabaseConfig): Promise<DatabaseMetrics> {
  const $db = getDatabaseClient(config);
  
  switch (config.type) {
    case 'postgresql':
      return await collectPostgreSQLMetrics($db, config);
    case 'mysql':
      return await collectMySQLMetrics($db, config);
    default:
      throw new Error(`Unsupported database type: ${config.type}`);
  }
}

async function collectPostgreSQLMetrics($db: any, config: DatabaseConfig): Promise<DatabaseMetrics> {
  // –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  const connections = await $db`psql -d ${config.database} -t -c "SELECT count(*) FROM pg_stat_activity"`;
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
  const stats = await $db`psql -d ${config.database} -t -c "SELECT sum(calls) as total_calls, sum(total_time) as total_time FROM pg_stat_statements"`;
  
  // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏
  const locks = await $db`psql -d ${config.database} -t -c "SELECT count(*) FROM pg_locks WHERE granted = false"`;
  
  // –ú–µ–¥–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
  const slowQueries = await $db`psql -d ${config.database} -t -c "
    SELECT query, total_time/calls as avg_time 
    FROM pg_stat_statements 
    WHERE calls > 0 
    ORDER BY avg_time DESC 
    LIMIT 5
  "`.then(r => 
    r.stdout.trim().split('\n').filter(Boolean).map(line => {
      const [query, duration] = line.split('|').map(s => s.trim());
      return { query, duration: parseFloat(duration) };
    })
  );
  
  return {
    activeConnections: parseInt(connections.stdout.trim()),
    queriesPerSecond: 0, // –ù—É–∂–Ω–æ –≤—ã—á–∏—Å–ª–∏—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    avgLatency: 0,
    locks: parseInt(locks.stdout.trim()),
    slowQueries
  };
}

async function collectMySQLMetrics($db: any, config: DatabaseConfig): Promise<DatabaseMetrics> {
  // –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  const connections = await $db`mysql ${config.database} -N -e "SHOW STATUS LIKE 'Threads_connected'" | awk '{print $2}'`;
  
  // –ó–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É
  const queries = await $db`mysql ${config.database} -N -e "SHOW STATUS LIKE 'Questions'" | awk '{print $2}'`;
  
  // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏
  const locks = await $db`mysql ${config.database} -N -e "SELECT COUNT(*) FROM information_schema.INNODB_LOCKS"`;
  
  return {
    activeConnections: parseInt(connections.stdout.trim()),
    queriesPerSecond: 0,
    avgLatency: 0,
    locks: parseInt(locks.stdout.trim()),
    slowQueries: []
  };
}

function analyzeDatabaseMetrics(metrics: DatabaseMetrics[]) {
  console.log('\n\n=== –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ===\n');
  
  // –°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
  const avgConnections = average(metrics.map(m => m.activeConnections));
  const maxConnections = Math.max(...metrics.map(m => m.activeConnections));
  const avgLocks = average(metrics.map(m => m.locks));
  
  console.log(`–°–æ–µ–¥–∏–Ω–µ–Ω–∏—è:`);
  console.log(`  –°—Ä–µ–¥–Ω–µ–µ: ${avgConnections.toFixed(1)}`);
  console.log(`  –ú–∞–∫—Å–∏–º—É–º: ${maxConnections}`);
  
  console.log(`\n–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏:`);
  console.log(`  –°—Ä–µ–¥–Ω–µ–µ: ${avgLocks.toFixed(1)}`);
  
  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  console.log('\nüìå –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
  
  if (avgConnections > 100) {
    console.log('- –í—ã—Å–æ–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π');
  }
  
  if (avgLocks > 10) {
    console.log('- –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —á–∞—Å—Ç—ã–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
  }
}

// 5. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function optimizeDatabase(config: DatabaseConfig) {
  console.log('\n=== –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ===\n');
  
  const tasks = [];
  
  switch (config.type) {
    case 'postgresql':
      tasks.push(
        { name: 'VACUUM ANALYZE', fn: () => vacuumPostgreSQL(config) },
        { name: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏', fn: () => updatePostgreSQLStats(config) },
        { name: '–ü–æ–∏—Å–∫ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤', fn: () => findUnusedIndexes(config) },
        { name: '–ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–∞ —Ç–∞–±–ª–∏—Ü', fn: () => analyzeTableSizes(config) }
      );
      break;
    case 'mysql':
      tasks.push(
        { name: 'OPTIMIZE TABLES', fn: () => optimizeMySQL(config) },
        { name: '–ê–Ω–∞–ª–∏–∑ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞—Ü–∏–∏', fn: () => analyzeMySQLFragmentation(config) },
        { name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤', fn: () => checkMySQLIndexes(config) }
      );
      break;
  }
  
  for (const task of tasks) {
    console.log(`\nüìä ${task.name}...`);
    try {
      await task.fn();
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }
  }
}

async function vacuumPostgreSQL(config: DatabaseConfig) {
  const $db = getDatabaseClient(config);
  
  // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
  const tables = await $db`psql -d ${config.database} -t -c "
    SELECT schemaname || '.' || tablename 
    FROM pg_tables 
    WHERE schemaname NOT IN ('pg_catalog', 'information_schema')
  "`;
  
  const tableList = tables.stdout.trim().split('\n').filter(Boolean);
  // –í @xec-sh/core –Ω–µ—Ç progress, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  let processed = 0;
  
  for (const table of tableList) {
    await $db`psql -d ${config.database} -c "VACUUM ANALYZE ${table.trim()}"`;
    processed++;
    process.stdout.write(`\rVACUUM —Ç–∞–±–ª–∏—Ü: ${processed}/${tableList.length}`);
  }
  
  progressBar.stop();
  console.log(`‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ç–∞–±–ª–∏—Ü: ${tableList.length}`);
}

async function updatePostgreSQLStats(config: DatabaseConfig) {
  const $db = getDatabaseClient(config);
  
  await $db`psql -d ${config.database} -c "ANALYZE"`;
  console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
}

async function findUnusedIndexes(config: DatabaseConfig) {
  const $db = getDatabaseClient(config);
  
  const unusedIndexes = await $db`psql -d ${config.database} -t -c "
    SELECT schemaname || '.' || indexname AS index_name,
           pg_size_pretty(pg_relation_size(indexrelid)) AS index_size
    FROM pg_stat_user_indexes
    WHERE idx_scan = 0
    AND schemaname NOT IN ('pg_catalog', 'information_schema')
    ORDER BY pg_relation_size(indexrelid) DESC
  "`;
  
  const indexes = unusedIndexes.stdout.trim().split('\n').filter(Boolean);
  
  if (indexes.length > 0) {
    console.log('‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∏–Ω–¥–µ–∫—Å—ã:');
    indexes.forEach(idx => {
      const [name, size] = idx.split('|').map(s => s.trim());
      console.log(`  - ${name} (${size})`);
    });
  } else {
    console.log('‚úÖ –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
  }
}

async function analyzeTableSizes(config: DatabaseConfig) {
  const $db = getDatabaseClient(config);
  
  const tableSizes = await $db`psql -d ${config.database} -t -c "
    SELECT schemaname || '.' || tablename AS table_name,
           pg_size_pretty(pg_total_relation_size(schemaname||'.'||tablename)) AS total_size,
           pg_size_pretty(pg_relation_size(schemaname||'.'||tablename)) AS table_size
    FROM pg_tables
    WHERE schemaname NOT IN ('pg_catalog', 'information_schema')
    ORDER BY pg_total_relation_size(schemaname||'.'||tablename) DESC
    LIMIT 10
  "`;
  
  console.log('üìä –¢–æ–ø 10 —Ç–∞–±–ª–∏—Ü –ø–æ —Ä–∞–∑–º–µ—Ä—É:');
  console.log('–¢–∞–±–ª–∏—Ü–∞ | –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä | –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö');
  console.log('-'.repeat(50));
  
  tableSizes.stdout.trim().split('\n').filter(Boolean).forEach(line => {
    const [table, total, data] = line.split('|').map(s => s.trim());
    console.log(`${table} | ${total} | ${data}`);
  });
}

async function optimizeMySQL(config: DatabaseConfig) {
  const $db = getDatabaseClient(config);
  
  // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
  const tables = await $db`mysql ${config.database} -N -e "SHOW TABLES"`;
  const tableList = tables.stdout.trim().split('\n').filter(Boolean);
  
  // –í @xec-sh/core –Ω–µ—Ç progress, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  let optimized = 0;
  
  for (const table of tableList) {
    await $db`mysql ${config.database} -e "OPTIMIZE TABLE ${table}"`;
    optimized++;
    process.stdout.write(`\r–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü: ${optimized}/${tableList.length}`);
  }
  
  progressBar.stop();
  console.log(`‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ç–∞–±–ª–∏—Ü: ${tableList.length}`);
}

async function analyzeMySQLFragmentation(config: DatabaseConfig) {
  const $db = getDatabaseClient(config);
  
  const fragmentation = await $db`mysql ${config.database} -e "
    SELECT TABLE_NAME, 
           ROUND(DATA_FREE/1024/1024, 2) AS fragmentation_mb
    FROM information_schema.TABLES
    WHERE TABLE_SCHEMA = '${config.database}'
    AND DATA_FREE > 0
    ORDER BY DATA_FREE DESC
  "`;
  
  console.log('üìä –§—Ä–∞–≥–º–µ–Ω—Ç–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü:');
  console.log(fragmentation.stdout);
}

async function checkMySQLIndexes(config: DatabaseConfig) {
  const $db = getDatabaseClient(config);
  
  // –î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∏–Ω–¥–µ–∫—Å—ã
  const duplicates = await $db`mysql ${config.database} -e "
    SELECT TABLE_NAME, GROUP_CONCAT(INDEX_NAME) AS duplicate_indexes
    FROM information_schema.STATISTICS
    WHERE TABLE_SCHEMA = '${config.database}'
    GROUP BY TABLE_NAME, COLUMN_NAME
    HAVING COUNT(*) > 1
  "`;
  
  if (duplicates.stdout.trim().split('\n').length > 1) {
    console.log('‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∏–Ω–¥–µ–∫—Å—ã:');
    console.log(duplicates.stdout);
  } else {
    console.log('‚úÖ –î—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∏–Ω–¥–µ–∫—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
  }
}

// –£—Ç–∏–ª–∏—Ç—ã
function getDatabaseClient(config: DatabaseConfig) {
  switch (config.type) {
    case 'postgresql':
      return $.with({
        env: {
          PGPASSWORD: config.password,
          PGHOST: config.host,
          PGPORT: config.port || '5432',
          PGUSER: config.username
        }
      });
    case 'mysql':
      return $.with({
        env: {
          MYSQL_PWD: config.password
        }
      });
    default:
      return $;
  }
}

async function uploadBackupToCloud(backupFile: string, cloudConfig: CloudStorageConfig) {
  console.log('\n‚òÅÔ∏è  –ó–∞–≥—Ä—É–∑–∫–∞ –≤ –æ–±–ª–∞–∫–æ...');
  
  switch (cloudConfig.provider) {
    case 's3':
      await $`aws s3 cp ${backupFile} s3://${cloudConfig.bucket}/${path.basename(backupFile)}`;
      break;
    case 'gcs':
      await $`gsutil cp ${backupFile} gs://${cloudConfig.bucket}/${path.basename(backupFile)}`;
      break;
    case 'azure':
      await $`az storage blob upload -f ${backupFile} -c ${cloudConfig.container} -n ${path.basename(backupFile)}`;
      break;
  }
  
  console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –≤ –æ–±–ª–∞–∫–æ');
}

async function cleanupOldBackups(backupPath: string, retentionDays: number) {
  console.log('\nüóëÔ∏è  –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤...');
  
  const cutoffDate = new Date();
  cutoffDate.setDate(cutoffDate.getDate() - retentionDays);
  
  const files = await fs.readdir(backupPath);
  let deletedCount = 0;
  
  for (const file of files) {
    const filePath = path.join(backupPath, file);
    const stats = await fs.stat(filePath);
    
    if (stats.mtime < cutoffDate) {
      await fs.unlink(filePath);
      deletedCount++;
    }
  }
  
  if (deletedCount > 0) {
    console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤: ${deletedCount}`);
  }
}

async function sendBackupNotification(config: BackupConfig, result: any) {
  if (!config.notifications) return;
  
  const message = result.status === 'success'
    ? `‚úÖ –ë—ç–∫–∞–ø ${config.database} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω\n–§–∞–π–ª: ${path.basename(result.file)}\n–†–∞–∑–º–µ—Ä: ${formatBytes(result.size)}`
    : `‚ùå –û—à–∏–±–∫–∞ –±—ç–∫–∞–ø–∞ ${config.database}\n${result.error}`;
  
  // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  console.log('\nüìß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:', message);
}

function formatBytes(bytes: number): string {
  const units = ['B', 'KB', 'MB', 'GB', 'TB'];
  let size = bytes;
  let unitIndex = 0;
  
  while (size >= 1024 && unitIndex < units.length - 1) {
    size /= 1024;
    unitIndex++;
  }
  
  return `${size.toFixed(2)} ${units[unitIndex]}`;
}

function average(numbers: number[]): number {
  return numbers.reduce((a, b) => a + b, 0) / numbers.length;
}

// –¢–∏–ø—ã
interface DatabaseConfig {
  type: 'postgresql' | 'mysql' | 'mongodb';
  host: string;
  port?: number;
  username: string;
  password: string;
  database: string;
}

interface BackupConfig extends DatabaseConfig {
  backupPath: string;
  retentionDays: number;
  uploadToCloud?: boolean;
  cloudStorage?: CloudStorageConfig;
  includeRoles?: boolean;
  includeLargeObjects?: boolean;
  notifications?: boolean;
}

interface RestoreConfig extends DatabaseConfig {
  backupFile: string;
  dropExisting?: boolean;
  force?: boolean;
}

interface MigrationConfig extends DatabaseConfig {
  migrationsPath: string;
  backupBeforeMigration?: boolean;
  stopOnError?: boolean;
  rollbackOnError?: boolean;
}

interface CloudStorageConfig {
  provider: 's3' | 'gcs' | 'azure';
  bucket?: string;
  container?: string;
  credentials?: any;
}

interface Migration {
  name: string;
  path: string;
}

interface DatabaseMetrics {
  activeConnections: number;
  queriesPerSecond: number;
  avgLatency: number;
  locks: number;
  slowQueries: Array<{ query: string; duration: number }>;
}

// –≠–∫—Å–ø–æ—Ä—Ç
export {
  databaseBackup,
  databaseRestore,
  optimizeDatabase,
  runDatabaseMigrations,
  monitorDatabasePerformance
};