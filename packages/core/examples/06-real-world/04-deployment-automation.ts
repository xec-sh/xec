/**
 * 04. Deployment Automation - –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
 * 
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.
 * 
 * –í–ê–ñ–ù–û: –í @xec-sh/core –Ω–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —É—Ç–∏–ª–∏—Ç –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è.
 * –î–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —Ñ–∞–π–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã shell.
 */

import * as path from 'path';
import * as fs from 'fs/promises';
import { $, withTempDir } from '@xec-sh/core';

// 1. –ú–Ω–æ–≥–æ—Å–µ—Ä–≤–µ—Ä–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ
interface DeploymentTarget {
  name: string;
  host: string;
  username: string;
  privateKey: string;
  deployPath: string;
  environment: 'production' | 'staging' | 'development';
  role: 'web' | 'api' | 'worker' | 'database';
}

async function multiServerDeployment(
  targets: DeploymentTarget[],
  config: DeploymentConfig
) {
  console.log('\n=== –ú–Ω–æ–≥–æ—Å–µ—Ä–≤–µ—Ä–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ ===\n');
  console.log(`–í–µ—Ä—Å–∏—è: ${config.version}`);
  console.log(`–í–µ—Ç–∫–∞: ${config.branch}`);
  console.log(`–°–µ—Ä–≤–µ—Ä–æ–≤: ${targets.length}\n`);
  
  // –°–æ–∑–¥–∞–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
  const artifactPath = await createDeploymentArtifact(config);
  
  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–µ—Ä–≤–µ—Ä—ã –ø–æ —Ä–æ–ª—è–º
  const serversByRole = groupBy(targets, 'role');
  const deploymentOrder = ['database', 'api', 'worker', 'web'];
  
  const results = [];
  
  for (const role of deploymentOrder) {
    const servers = serversByRole[role] || [];
    if (servers.length === 0) continue;
    
    console.log(`\nüì¶ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ ${role} —Å–µ—Ä–≤–µ—Ä–æ–≤ (${servers.length})...`);
    
    // –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ–¥–Ω–æ–π —Ä–æ–ª–∏
    const roleResults = await deployToServers(servers, artifactPath, config);
    results.push(...roleResults);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –ø–æ—Å–ª–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è —Ä–æ–ª–∏
    if (config.healthCheck) {
      await performHealthChecks(servers, config);
    }
  }
  
  // –û—Ç—á–µ—Ç –æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏
  generateDeploymentReport(results, config);
  
  // –û—á–∏—â–∞–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç
  await $`rm -f ${artifactPath}`;
  
  return results;
}

async function createDeploymentArtifact(config: DeploymentConfig): Promise<string> {
  console.log('üî® –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞...');
  
  // withTempDir –ø—Ä–∏–Ω–∏–º–∞–µ—Ç callback –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ
  const artifactPath = await withTempDir(async (tmpDir) => {
    const buildDir = path.join(tmpDir.path, 'build');
    
    // –ö–ª–æ–Ω–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
    await $`git clone --branch ${config.branch} --depth 1 ${config.repository} ${buildDir}`;
    
    // –°–æ–∑–¥–∞—ë–º $ —Å —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π
    const $build = $.cd(buildDir);
    await $build`npm ci --production`;
    await $build`npm run build`;
    
    // –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    const metadata = {
      version: config.version,
      branch: config.branch,
      commit: await $build`git rev-parse HEAD`.then(r => r.stdout.trim()),
      buildTime: new Date().toISOString(),
      buildHost: await $`hostname`.then(r => r.stdout.trim())
    };
    
    await fs.writeFile(
      path.join(buildDir, 'deployment.json'),
      JSON.stringify(metadata, null, 2)
    );
    
    // –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º
    const artifactName = `deploy-${config.version}-${Date.now()}.tar.gz`;
    await $`tar -czf ${artifactName} -C ${buildDir} .`;
    
    return path.resolve(artifactName);
  });
  
  return artifactPath;
}

async function deployToServers(
  servers: DeploymentTarget[],
  artifactPath: string,
  config: DeploymentConfig
): Promise<DeploymentResult[]> {
  console.log(`–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ ${servers.length} —Å–µ—Ä–≤–µ—Ä–∞—Ö...`);
  let deployed = 0;
  
  const deploymentPromises = servers.map(async (server) => {
    const result: DeploymentResult = {
      server: server.name,
      status: 'pending',
      startTime: new Date(),
      endTime: null,
      error: null,
      rollbackVersion: null
    };
    
    try {
      // –°–æ–∑–¥–∞—ë–º $ —Å SSH –∞–¥–∞–ø—Ç–µ—Ä–æ–º
      const $ssh = $.with({
        adapter: 'ssh',
        sshOptions: {
          host: server.host,
          username: server.username,
          privateKey: server.privateKey
        }
      });
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è –æ—Ç–∫–∞—Ç–∞
      result.rollbackVersion = await getCurrentVersion($ssh, server.deployPath);
      
      // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
      const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
      const releaseDir = `${server.deployPath}/releases/${timestamp}`;
      
      await $ssh`mkdir -p ${releaseDir}`;
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç —á–µ—Ä–µ–∑ scp
      await $`scp -i ${server.privateKey} ${artifactPath} ${server.username}@${server.host}:${releaseDir}/artifact.tar.gz`;
      
      // –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º
      await $ssh`cd ${releaseDir} && tar -xzf artifact.tar.gz && rm artifact.tar.gz`;
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
      await $ssh`cp ${server.deployPath}/shared/.env ${releaseDir}/.env || true`;
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º pre-deploy —Ö—É–∫–∏
      if (config.hooks?.preDeploy) {
        await $ssh`cd ${releaseDir} && ${config.hooks.preDeploy}`;
      }
      
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—É—é –≤–µ—Ä—Å–∏—é
      await $ssh`cd ${server.deployPath}/current && npm run stop || true`;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏–º–ª–∏–Ω–∫
      await $ssh`ln -sfn ${releaseDir} ${server.deployPath}/current`;
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é
      await $ssh`cd ${server.deployPath}/current && npm run start:${server.environment}`;
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º post-deploy —Ö—É–∫–∏
      if (config.hooks?.postDeploy) {
        await $ssh`cd ${server.deployPath}/current && ${config.hooks.postDeploy}`;
      }
      
      // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–µ–ª–∏–∑—ã
      await cleanupOldReleases($ssh, server.deployPath, config.keepReleases || 5);
      
      result.status = 'success';
      result.endTime = new Date();
      
    } catch (error) {
      result.status = 'failed';
      result.error = (error as Error).message;
      result.endTime = new Date();
      
      // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫–∞—Ç–∏—Ç—å—Å—è
      if (config.autoRollback && result.rollbackVersion) {
        await rollbackDeployment(server, result.rollbackVersion);
      }
    }
    
    deployed++;
    process.stdout.write(`\r–†–∞–∑–≤–µ—Ä–Ω—É—Ç–æ: ${deployed}/${servers.length}`);
    return result;
  });
  
  const results = await Promise.all(deploymentPromises);
  console.log(''); // –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
  
  return results;
}

async function getCurrentVersion($ssh: any, deployPath: string): Promise<string | null> {
  try {
    const result = await $ssh`readlink ${deployPath}/current`;
    return path.basename(result.stdout.trim());
  } catch {
    return null;
  }
}

async function cleanupOldReleases($ssh: any, deployPath: string, keepCount: number) {
  // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–ª–∏–∑–æ–≤
  const releases = await $ssh`ls -t ${deployPath}/releases`;
  const releaseList = releases.stdout.trim().split('\n').filter(Boolean);
  
  if (releaseList.length > keepCount) {
    const toDelete = releaseList.slice(keepCount);
    for (const release of toDelete) {
      await $ssh`rm -rf ${deployPath}/releases/${release}`;
    }
    console.log(`  –£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö —Ä–µ–ª–∏–∑–æ–≤: ${toDelete.length}`);
  }
}

// 2. Blue-Green —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ
async function blueGreenDeployment(
  config: BlueGreenConfig
) {
  console.log('\n=== Blue-Green —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ ===\n');
  
  const $ssh = $.with({
    adapter: 'ssh',
    sshOptions: {
      host: config.host,
      username: config.username,
      privateKey: config.privateKey
    }
  });
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
  const currentEnv = await $ssh`cat ${config.basePath}/current-env 2>/dev/null || echo "blue"`;
  const activeEnv = currentEnv.stdout.trim();
  const inactiveEnv = activeEnv === 'blue' ? 'green' : 'blue';
  
  console.log(`–¢–µ–∫—É—â–µ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ: ${activeEnv}`);
  console.log(`–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –≤: ${inactiveEnv}`);
  
  try {
    // 1. –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–µ–º –≤ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    console.log(`\n1Ô∏è‚É£ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –≤ ${inactiveEnv}...`);
    const deployPath = `${config.basePath}/${inactiveEnv}`;
    
    await $ssh`cd ${deployPath} && git pull origin ${config.branch}`;
    await $ssh`cd ${deployPath} && npm ci --production`;
    await $ssh`cd ${deployPath} && npm run build`;
    
    // 2. –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏
    console.log(`\n2Ô∏è‚É£ –ó–∞–ø—É—Å–∫ ${inactiveEnv} –æ–∫—Ä—É–∂–µ–Ω–∏—è...`);
    const inactivePort = inactiveEnv === 'blue' ? config.bluePort : config.greenPort;
    
    await $ssh`cd ${deployPath} && PORT=${inactivePort} npm run start:bg`;
    
    // 3. –ü—Ä–æ–≥—Ä–µ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    console.log('\n3Ô∏è‚É£ –ü—Ä–æ–≥—Ä–µ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
    await warmupApplication(`http://${config.host}:${inactivePort}`, config.warmupEndpoints);
    
    // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
    console.log('\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è...');
    const healthCheck = await checkApplicationHealth(
      `http://${config.host}:${inactivePort}/health`
    );
    
    if (!healthCheck.healthy) {
      throw new Error(`Health check failed: ${healthCheck.error}`);
    }
    
    // 5. –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞
    console.log('\n5Ô∏è‚É£ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞...');
    await switchTraffic($ssh, config, inactiveEnv);
    
    // 6. –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    await $ssh`echo "${inactiveEnv}" > ${config.basePath}/current-env`;
    
    // 7. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ (—Å –∑–∞–¥–µ—Ä–∂–∫–æ–π)
    console.log(`\n6Ô∏è‚É£ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ ${activeEnv} –æ–∫—Ä—É–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥...`);
    setTimeout(async () => {
      const activePort = activeEnv === 'blue' ? config.bluePort : config.greenPort;
      await $ssh`fuser -k ${activePort}/tcp || true`;
      console.log(`‚úÖ ${activeEnv} –æ–∫—Ä—É–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ`);
    }, 30000);
    
    console.log('\n‚úÖ Blue-Green —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è:', error.message);
    console.log('–û—Ç–∫–∞—Ç—ã–≤–∞–µ–º—Å—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ...');
    
    // –û—Ç–∫–∞—Ç –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è - —Å—Ç–∞—Ä–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –≤—Å–µ –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    console.log(`‚úÖ –¢—Ä–∞—Ñ–∏–∫ –æ—Å—Ç–∞–µ—Ç—Å—è –Ω–∞ ${activeEnv} –æ–∫—Ä—É–∂–µ–Ω–∏–∏`);
    throw error;
  }
}

async function warmupApplication(baseUrl: string, endpoints: string[]) {
  console.log('–ü—Ä–æ–≥—Ä–µ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
  
  for (const endpoint of endpoints) {
    process.stdout.write(`\r–ü—Ä–æ–≥—Ä–µ–≤ ${endpoint}...`);
    try {
      await $`curl -s ${baseUrl}${endpoint} > /dev/null`;
    } catch {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–æ–≥—Ä–µ–≤–∞
    }
  }
  
  console.log('\n‚úÖ –ü—Ä–æ–≥—Ä–µ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω');
}

async function checkApplicationHealth(healthUrl: string, retries = 5): Promise<HealthCheckResult> {
  for (let i = 0; i < retries; i++) {
    try {
      const result = await $`curl -s -f ${healthUrl}`;
      const health = JSON.parse(result.stdout);
      
      if (health.status === 'ok' || health.healthy === true) {
        return { healthy: true, details: health };
      }
    } catch (error) {
      if (i === retries - 1) {
        return { healthy: false, error: error.message };
      }
      // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
      await new Promise(resolve => setTimeout(resolve, 2000));
    }
  }
  
  return { healthy: false, error: 'Health check timeout' };
}

async function switchTraffic($ssh: any, config: BlueGreenConfig, targetEnv: string) {
  const targetPort = targetEnv === 'blue' ? config.bluePort : config.greenPort;
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é nginx
  const nginxConfig = `
upstream app {
    server 127.0.0.1:${targetPort};
}

server {
    listen 80;
    server_name ${config.domain};
    
    location / {
        proxy_pass http://app;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
    }
}
`;
  
  await $ssh`echo '${nginxConfig}' | sudo tee /etc/nginx/sites-available/${config.domain}`;
  await $ssh`sudo nginx -t`;
  await $ssh`sudo nginx -s reload`;
}

// 3. –ö–∞–Ω–∞—Ä–µ–µ—á–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ
async function canaryDeployment(
  config: CanaryConfig,
  servers: DeploymentTarget[]
) {
  console.log('\n=== –ö–∞–Ω–∞—Ä–µ–µ—á–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ ===\n');
  console.log(`–°—Ç—Ä–∞—Ç–µ–≥–∏—è: ${config.strategy}`);
  console.log(`–≠—Ç–∞–ø—ã: ${config.stages.map(s => `${s.percentage}%`).join(' ‚Üí ')}\n`);
  
  const totalServers = servers.length;
  let deployedServers = 0;
  
  for (const stage of config.stages) {
    const serversInStage = Math.ceil(totalServers * stage.percentage / 100);
    const targetServers = servers.slice(deployedServers, deployedServers + serversInStage);
    
    console.log(`\nüïäÔ∏è –≠—Ç–∞–ø ${stage.name}: ${stage.percentage}% (${targetServers.length} —Å–µ—Ä–≤–µ—Ä–æ–≤)`);
    
    // –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–µ–º –Ω–∞ —Ü–µ–ª–µ–≤—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö
    const results = await deployToServers(targetServers, config.artifactPath, config);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const failed = results.filter(r => r.status === 'failed');
    if (failed.length > 0) {
      console.error(`‚ùå –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–ª–∏–ª–æ—Å—å –Ω–∞ ${failed.length} —Å–µ—Ä–≤–µ—Ä–∞—Ö`);
      
      if (config.rollbackOnFailure) {
        await rollbackCanaryDeployment(servers.slice(0, deployedServers + serversInStage));
      }
      
      throw new Error('Canary deployment failed');
    }
    
    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –º–µ—Ç—Ä–∏–∫–∏
    console.log(`\nüìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–µ—Ç—Ä–∏–∫ (${stage.monitorDuration}—Å)...`);
    const metrics = await monitorCanaryMetrics(
      targetServers,
      stage.monitorDuration,
      config.metrics
    );
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏
    const analysis = analyzeCanaryMetrics(metrics, config.thresholds);
    
    if (!analysis.healthy) {
      console.error('‚ùå –ú–µ—Ç—Ä–∏–∫–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –ø–æ—Ä–æ–≥–∞–º:');
      analysis.violations.forEach(v => console.error(`  - ${v}`));
      
      if (config.rollbackOnFailure) {
        await rollbackCanaryDeployment(servers.slice(0, deployedServers + serversInStage));
      }
      
      throw new Error('Canary metrics validation failed');
    }
    
    console.log('‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ –≤ –Ω–æ—Ä–º–µ');
    deployedServers += serversInStage;
    
    // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —ç—Ç–∞–ø–∞–º–∏
    if (stage.pauseAfter && deployedServers < totalServers) {
      console.log(`\n‚è∏Ô∏è –ü–∞—É–∑–∞ ${stage.pauseAfter}—Å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —ç—Ç–∞–ø–æ–º...`);
      await new Promise(resolve => setTimeout(resolve, stage.pauseAfter * 1000));
    }
  }
  
  console.log('\n‚úÖ –ö–∞–Ω–∞—Ä–µ–µ—á–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
}

async function monitorCanaryMetrics(
  servers: DeploymentTarget[],
  duration: number,
  metricsConfig: MetricsConfig
): Promise<CanaryMetrics> {
  const startTime = Date.now();
  const metrics: CanaryMetrics = {
    errorRate: [],
    responseTime: [],
    cpu: [],
    memory: []
  };
  
  process.stdout.write('–°–±–æ—Ä –º–µ—Ç—Ä–∏–∫...');
  
  while (Date.now() - startTime < duration * 1000) {
    const timestamp = Date.now();
    
    // –°–æ–±–∏—Ä–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ —Å–æ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
    const serverMetrics = await Promise.all(
      servers.map(server => collectServerMetrics(server, metricsConfig))
    );
    
    // –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏
    const aggregated = aggregateMetrics(serverMetrics);
    
    metrics.errorRate.push({ timestamp, value: aggregated.errorRate });
    metrics.responseTime.push({ timestamp, value: aggregated.responseTime });
    metrics.cpu.push({ timestamp, value: aggregated.cpu });
    metrics.memory.push({ timestamp, value: aggregated.memory });
    
    process.stdout.write(`\r–ú–µ—Ç—Ä–∏–∫–∏: –û—à–∏–±–∫–∏ ${aggregated.errorRate.toFixed(2)}% | –û—Ç–∫–ª–∏–∫ ${aggregated.responseTime}ms | CPU ${aggregated.cpu.toFixed(1)}%`);
    
    // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Å–±–æ—Ä–æ–º
    await new Promise(resolve => setTimeout(resolve, 5000));
  }
  
  console.log(''); // –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
  return metrics;
}

async function collectServerMetrics(
  server: DeploymentTarget,
  config: MetricsConfig
): Promise<ServerMetrics> {
  const $ssh = $.with({
    adapter: 'ssh',
    sshOptions: {
      host: server.host,
      username: server.username,
      privateKey: server.privateKey
    }
  });
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    const appMetrics = await $ssh`curl -s http://localhost:${config.metricsPort}/metrics`;
    const metrics = JSON.parse(appMetrics.stdout);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    const cpu = await $ssh`top -bn1 | grep "Cpu(s)" | awk '{print $2}' | cut -d'%' -f1`;
    const memory = await $ssh`free | grep Mem | awk '{print ($3/$2) * 100}'`;
    
    return {
      errorRate: metrics.errorRate || 0,
      responseTime: metrics.responseTime || 0,
      cpu: parseFloat(cpu.stdout),
      memory: parseFloat(memory.stdout)
    };
  } catch {
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
    return {
      errorRate: 0,
      responseTime: 0,
      cpu: 0,
      memory: 0
    };
  }
}

function aggregateMetrics(serverMetrics: ServerMetrics[]): ServerMetrics {
  const count = serverMetrics.length;
  
  return {
    errorRate: serverMetrics.reduce((sum, m) => sum + m.errorRate, 0) / count,
    responseTime: serverMetrics.reduce((sum, m) => sum + m.responseTime, 0) / count,
    cpu: serverMetrics.reduce((sum, m) => sum + m.cpu, 0) / count,
    memory: serverMetrics.reduce((sum, m) => sum + m.memory, 0) / count
  };
}

function analyzeCanaryMetrics(
  metrics: CanaryMetrics,
  thresholds: MetricThresholds
): MetricsAnalysis {
  const violations = [];
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
  const avgErrorRate = average(metrics.errorRate.map(m => m.value));
  const avgResponseTime = average(metrics.responseTime.map(m => m.value));
  const avgCpu = average(metrics.cpu.map(m => m.value));
  const avgMemory = average(metrics.memory.map(m => m.value));
  
  if (avgErrorRate > thresholds.maxErrorRate) {
    violations.push(`Error rate ${avgErrorRate.toFixed(2)}% exceeds threshold ${thresholds.maxErrorRate}%`);
  }
  
  if (avgResponseTime > thresholds.maxResponseTime) {
    violations.push(`Response time ${avgResponseTime}ms exceeds threshold ${thresholds.maxResponseTime}ms`);
  }
  
  if (avgCpu > thresholds.maxCpu) {
    violations.push(`CPU usage ${avgCpu.toFixed(1)}% exceeds threshold ${thresholds.maxCpu}%`);
  }
  
  if (avgMemory > thresholds.maxMemory) {
    violations.push(`Memory usage ${avgMemory.toFixed(1)}% exceeds threshold ${thresholds.maxMemory}%`);
  }
  
  return {
    healthy: violations.length === 0,
    violations,
    metrics: {
      errorRate: avgErrorRate,
      responseTime: avgResponseTime,
      cpu: avgCpu,
      memory: avgMemory
    }
  };
}

// 4. –û—Ç–∫–∞—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
async function rollbackDeployment(
  server: DeploymentTarget,
  version: string
) {
  console.log(`\nüîÑ –û—Ç–∫–∞—Ç –Ω–∞ ${server.name} –∫ –≤–µ—Ä—Å–∏–∏ ${version}...`);
  
  const $ssh = $.with({
    adapter: 'ssh',
    sshOptions: {
      host: server.host,
      username: server.username,
      privateKey: server.privateKey
    }
  });
  
  try {
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é
    await $ssh`cd ${server.deployPath}/current && npm run stop || true`;
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –≤–µ—Ä—Å–∏—é
    await $ssh`ln -sfn ${server.deployPath}/releases/${version} ${server.deployPath}/current`;
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
    await $ssh`cd ${server.deployPath}/current && npm run start:${server.environment}`;
    
    console.log(`‚úÖ –û—Ç–∫–∞—Ç –Ω–∞ ${server.name} –∑–∞–≤–µ—Ä—à–µ–Ω`);
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–∞—Ç–∞ –Ω–∞ ${server.name}:`, error.message);
    throw error;
  }
}

async function rollbackCanaryDeployment(servers: DeploymentTarget[]) {
  console.log('\nüîÑ –û—Ç–∫–∞—Ç –∫–∞–Ω–∞—Ä–µ–µ—á–Ω–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è...');
  
  const rollbackPromises = servers.map(async server => {
    const version = await getDeploymentHistory(server);
    if (version) {
      await rollbackDeployment(server, version);
    }
  });
  
  await Promise.all(rollbackPromises);
  console.log('‚úÖ –û—Ç–∫–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
}

async function getDeploymentHistory(server: DeploymentTarget): Promise<string | null> {
  const $ssh = $.with({
    adapter: 'ssh',
    sshOptions: {
      host: server.host,
      username: server.username,
      privateKey: server.privateKey
    }
  });
  
  try {
    const history = await $ssh`ls -t ${server.deployPath}/releases | head -2 | tail -1`;
    return history.stdout.trim();
  } catch {
    return null;
  }
}

// 5. Health checks
async function performHealthChecks(
  servers: DeploymentTarget[],
  config: DeploymentConfig
) {
  console.log('\nüè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è...');
  
  const healthPromises = servers.map(async server => {
    const url = `http://${server.host}:${config.healthCheckPort}/health`;
    const result = await checkApplicationHealth(url);
    
    return {
      server: server.name,
      healthy: result.healthy,
      details: result.details || result.error
    };
  });
  
  const results = await Promise.all(healthPromises);
  
  results.forEach(r => {
    const icon = r.healthy ? '‚úÖ' : '‚ùå';
    console.log(`${icon} ${r.server}: ${r.healthy ? 'OK' : 'FAIL'}`);
    if (!r.healthy) {
      console.log(`   –î–µ—Ç–∞–ª–∏: ${r.details}`);
    }
  });
  
  const unhealthy = results.filter(r => !r.healthy);
  if (unhealthy.length > 0) {
    throw new Error(`Health check failed on ${unhealthy.length} servers`);
  }
}

// 6. –û—Ç—á–µ—Ç—ã
function generateDeploymentReport(
  results: DeploymentResult[],
  config: DeploymentConfig
) {
  console.log('\nüìã –û—Ç—á–µ—Ç –æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏');
  console.log('=' .repeat(50));
  console.log(`–í–µ—Ä—Å–∏—è: ${config.version}`);
  console.log(`–í—Ä–µ–º—è: ${new Date().toISOString()}`);
  console.log(`–í—Å–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–æ–≤: ${results.length}`);
  
  const successful = results.filter(r => r.status === 'success');
  const failed = results.filter(r => r.status === 'failed');
  
  console.log(`–£—Å–ø–µ—à–Ω–æ: ${successful.length}`);
  console.log(`–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failed.length}`);
  
  if (failed.length > 0) {
    console.log('\n–ü—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã:');
    failed.forEach(r => {
      console.log(`  - ${r.server}: ${r.error}`);
    });
  }
  
  // –í—Ä–µ–º—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
  const deploymentTimes = successful.map(r => 
    (r.endTime.getTime() - r.startTime.getTime()) / 1000
  );
  
  if (deploymentTimes.length > 0) {
    const avgTime = average(deploymentTimes);
    const maxTime = Math.max(...deploymentTimes);
    const minTime = Math.min(...deploymentTimes);
    
    console.log('\n–í—Ä–µ–º—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è:');
    console.log(`  –°—Ä–µ–¥–Ω–µ–µ: ${avgTime.toFixed(1)}—Å`);
    console.log(`  –ú–∏–Ω: ${minTime.toFixed(1)}—Å`);
    console.log(`  –ú–∞–∫—Å: ${maxTime.toFixed(1)}—Å`);
  }
}

// –£—Ç–∏–ª–∏—Ç—ã
function groupBy<T>(array: T[], key: keyof T): Record<string, T[]> {
  return array.reduce((result, item) => {
    const group = String(item[key]);
    if (!result[group]) result[group] = [];
    result[group].push(item);
    return result;
  }, {} as Record<string, T[]>);
}

function average(numbers: number[]): number {
  return numbers.reduce((a, b) => a + b, 0) / numbers.length;
}

// –¢–∏–ø—ã
interface DeploymentConfig {
  version: string;
  branch: string;
  repository: string;
  keepReleases?: number;
  healthCheck?: boolean;
  healthCheckPort?: number;
  autoRollback?: boolean;
  hooks?: {
    preDeploy?: string;
    postDeploy?: string;
  };
}

interface DeploymentResult {
  server: string;
  status: 'pending' | 'success' | 'failed';
  startTime: Date;
  endTime: Date | null;
  error: string | null;
  rollbackVersion: string | null;
}

interface BlueGreenConfig {
  host: string;
  username: string;
  privateKey: string;
  basePath: string;
  branch: string;
  domain: string;
  bluePort: number;
  greenPort: number;
  warmupEndpoints: string[];
}

interface CanaryConfig extends DeploymentConfig {
  strategy: 'linear' | 'exponential';
  stages: Array<{
    name: string;
    percentage: number;
    monitorDuration: number;
    pauseAfter?: number;
  }>;
  metrics: MetricsConfig;
  thresholds: MetricThresholds;
  rollbackOnFailure: boolean;
  artifactPath: string;
}

interface MetricsConfig {
  metricsPort: number;
  endpoints: string[];
}

interface MetricThresholds {
  maxErrorRate: number;
  maxResponseTime: number;
  maxCpu: number;
  maxMemory: number;
}

interface CanaryMetrics {
  errorRate: Array<{ timestamp: number; value: number }>;
  responseTime: Array<{ timestamp: number; value: number }>;
  cpu: Array<{ timestamp: number; value: number }>;
  memory: Array<{ timestamp: number; value: number }>;
}

interface ServerMetrics {
  errorRate: number;
  responseTime: number;
  cpu: number;
  memory: number;
}

interface MetricsAnalysis {
  healthy: boolean;
  violations: string[];
  metrics: ServerMetrics;
}

interface HealthCheckResult {
  healthy: boolean;
  details?: any;
  error?: string;
}

// –≠–∫—Å–ø–æ—Ä—Ç
export {
  canaryDeployment,
  rollbackDeployment,
  blueGreenDeployment,
  performHealthChecks,
  multiServerDeployment
};