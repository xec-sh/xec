/**
 * 06. API Server Automation - –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è API —Å–µ—Ä–≤–µ—Ä–æ–≤
 * 
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Ä–∞–±–æ—Ç—ã —Å API —Å–µ—Ä–≤–µ—Ä–∞–º–∏
 */

import * as path from 'path';
import { $ } from '@xec-sh/core';
import * as fs from 'fs/promises';

// 1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API
async function runApiTests(config: ApiTestConfig) {
  console.log('\n=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API ===\n');
  console.log(`Endpoint: ${config.baseUrl}`);
  console.log(`–¢–µ—Å—Ç–æ–≤: ${config.tests.length}\n`);
  
  const results = [];
  // –í @xec-sh/core –Ω–µ—Ç progress, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  let completed = 0;
  
  for (const test of config.tests) {
    const result = await executeApiTest(test, config);
    results.push(result);
    completed++;
    process.stdout.write(`\r–í—ã–ø–æ–ª–Ω–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: ${completed}/${config.tests.length}`);
  }
  
  console.log(''); // –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
  generateTestReport(results);
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  if (config.saveResults) {
    await saveTestResults(results, config.resultsPath);
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
  const failed = results.filter(r => !r.passed);
  if (failed.length > 0 && config.failOnError) {
    throw new Error(`${failed.length} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–∏–ª–æ—Å—å`);
  }
  
  return results;
}

async function executeApiTest(test: ApiTest, config: ApiTestConfig): Promise<TestResult> {
  const startTime = Date.now();
  const result: TestResult = {
    name: test.name,
    endpoint: test.endpoint,
    method: test.method,
    passed: false,
    duration: 0,
    assertions: [],
    error: null
  };
  
  try {
    // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
    const url = `${config.baseUrl}${test.endpoint}`;
    const curlOptions = [
      '-X', test.method,
      '-w', '\n%{http_code}\n%{time_total}',
      '-s'
    ];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    const headers = { ...config.defaultHeaders, ...test.headers };
    Object.entries(headers).forEach(([key, value]) => {
      curlOptions.push('-H', `${key}: ${value}`);
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
    if (test.body) {
      curlOptions.push('-d', JSON.stringify(test.body));
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
    if (config.auth) {
      if (config.auth.type === 'bearer') {
        curlOptions.push('-H', `Authorization: Bearer ${config.auth.token}`);
      } else if (config.auth.type === 'basic') {
        curlOptions.push('-u', `${config.auth.username}:${config.auth.password}`);
      }
    }
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
    const response = await $`curl ${curlOptions} ${url}`;
    const lines = response.stdout.trim().split('\n');
    
    // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
    const responseTime = parseFloat(lines.pop());
    const statusCode = parseInt(lines.pop());
    const responseBody = lines.join('\n');
    
    result.response = {
      statusCode,
      body: responseBody ? JSON.parse(responseBody) : null,
      time: responseTime * 1000 // –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    };
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
    for (const assertion of test.assertions) {
      const assertionResult = await checkAssertion(assertion, result.response);
      result.assertions.push(assertionResult);
      
      if (!assertionResult.passed) {
        result.passed = false;
      }
    }
    
    // –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—à–ª–∏
    if (result.assertions.every(a => a.passed)) {
      result.passed = true;
    }
    
  } catch (error) {
    result.error = error.message;
    result.passed = false;
  }
  
  result.duration = Date.now() - startTime;
  return result;
}

async function checkAssertion(assertion: ApiAssertion, response: any): Promise<AssertionResult> {
  const result: AssertionResult = {
    type: assertion.type,
    expected: assertion.expected,
    actual: null,
    passed: false,
    message: ''
  };
  
  switch (assertion.type) {
    case 'status':
      result.actual = response.statusCode;
      result.passed = response.statusCode === assertion.expected;
      result.message = `Status code: expected ${assertion.expected}, got ${result.actual}`;
      break;
      
    case 'responseTime':
      result.actual = response.time;
      result.passed = response.time <= assertion.expected;
      result.message = `Response time: expected <= ${assertion.expected}ms, got ${result.actual}ms`;
      break;
      
    case 'jsonPath':
      const value = getJsonPath(response.body, assertion.path);
      result.actual = value;
      result.passed = deepEqual(value, assertion.expected);
      result.message = `JSON path ${assertion.path}: expected ${JSON.stringify(assertion.expected)}, got ${JSON.stringify(result.actual)}`;
      break;
      
    case 'schema':
      const schemaValid = validateJsonSchema(response.body, assertion.schema);
      result.passed = schemaValid;
      result.message = schemaValid ? 'Schema validation passed' : 'Schema validation failed';
      break;
  }
  
  return result;
}

// 2. –ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
async function runLoadTest(config: LoadTestConfig) {
  console.log('\n=== –ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ===\n');
  console.log(`URL: ${config.url}`);
  console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${config.users}`);
  console.log(`–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${config.duration}—Å\n`);
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º Apache Bench (ab) –∏–ª–∏ wrk
  const tool = await detectLoadTestTool();
  
  if (!tool) {
    throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (ab, wrk)');
  }
  
  let result;
  
  switch (tool) {
    case 'ab':
      result = await runApacheBench(config);
      break;
    case 'wrk':
      result = await runWrk(config);
      break;
  }
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  analyzeLoadTestResults(result, config);
  
  return result;
}

async function detectLoadTestTool(): Promise<string | null> {
  const ab = await $`which ab`.nothrow();
  if (ab.ok) return 'ab';
  
  const wrk = await $`which wrk`.nothrow();
  if (wrk.ok) return 'wrk';
  
  return null;
}

async function runApacheBench(config: LoadTestConfig): Promise<LoadTestResult> {
  const totalRequests = config.users * config.duration * 10; // –ø—Ä–∏–º–µ—Ä–Ω–æ 10 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  
  const options = [
    '-n', totalRequests.toString(),
    '-c', config.users.toString(),
    '-t', config.duration.toString()
  ];
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
  if (config.headers) {
    Object.entries(config.headers).forEach(([key, value]) => {
      options.push('-H', `${key}: ${value}`);
    });
  }
  
  // POST –∑–∞–ø—Ä–æ—Å
  if (config.method === 'POST' && config.body) {
    const bodyFile = '/tmp/ab-body.json';
    await fs.writeFile(bodyFile, JSON.stringify(config.body));
    options.push('-p', bodyFile);
    options.push('-T', 'application/json');
  }
  
  console.log('üöÄ –ó–∞–ø—É—Å–∫ Apache Bench...\n');
  const result = await $`ab ${options} ${config.url}`;
  
  // –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  const output = result.stdout;
  const metrics: LoadTestResult = {
    tool: 'ab',
    totalRequests: parseInt(output.match(/Complete requests:\s+(\d+)/)?.[1] || '0'),
    failedRequests: parseInt(output.match(/Failed requests:\s+(\d+)/)?.[1] || '0'),
    requestsPerSecond: parseFloat(output.match(/Requests per second:\s+([\d.]+)/)?.[1] || '0'),
    meanLatency: parseFloat(output.match(/Time per request:\s+([\d.]+)\s+\[ms\]\s+\(mean\)/)?.[1] || '0'),
    p50Latency: parseFloat(output.match(/50%\s+(\d+)/)?.[1] || '0'),
    p90Latency: parseFloat(output.match(/90%\s+(\d+)/)?.[1] || '0'),
    p99Latency: parseFloat(output.match(/99%\s+(\d+)/)?.[1] || '0'),
    throughput: parseFloat(output.match(/Transfer rate:\s+([\d.]+)\s+\[Kbytes\/sec\]/)?.[1] || '0'),
    raw: output
  };
  
  return metrics;
}

async function runWrk(config: LoadTestConfig): Promise<LoadTestResult> {
  const options = [
    '-t', Math.min(config.users, 10).toString(), // –ø–æ—Ç–æ–∫–∏
    '-c', config.users.toString(), // —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    '-d', `${config.duration}s`,
    '--latency'
  ];
  
  // Lua —Å–∫—Ä–∏–ø—Ç –¥–ª—è POST –∑–∞–ø—Ä–æ—Å–æ–≤
  if (config.method === 'POST' && config.body) {
    const luaScript = `
wrk.method = "POST"
wrk.headers["Content-Type"] = "application/json"
wrk.body = '${JSON.stringify(config.body)}'
`;
    const scriptFile = '/tmp/wrk-script.lua';
    await fs.writeFile(scriptFile, luaScript);
    options.push('-s', scriptFile);
  }
  
  console.log('üöÄ –ó–∞–ø—É—Å–∫ wrk...\n');
  const result = await $`wrk ${options} ${config.url}`;
  
  // –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  const output = result.stdout;
  const metrics: LoadTestResult = {
    tool: 'wrk',
    totalRequests: parseInt(output.match(/(\d+) requests in/)?.[1] || '0'),
    failedRequests: parseInt(output.match(/Socket errors:.*?(\d+)/)?.[1] || '0'),
    requestsPerSecond: parseFloat(output.match(/Requests\/sec:\s+([\d.]+)/)?.[1] || '0'),
    meanLatency: parseFloat(output.match(/Latency\s+([\d.]+)ms/)?.[1] || '0'),
    p50Latency: parseFloat(output.match(/50%\s+([\d.]+)ms/)?.[1] || '0'),
    p90Latency: parseFloat(output.match(/90%\s+([\d.]+)ms/)?.[1] || '0'),
    p99Latency: parseFloat(output.match(/99%\s+([\d.]+)ms/)?.[1] || '0'),
    throughput: 0, // wrk –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç throughput –Ω–∞–ø—Ä—è–º—É—é
    raw: output
  };
  
  return metrics;
}

function analyzeLoadTestResults(result: LoadTestResult, config: LoadTestConfig) {
  console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
  console.log(`–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${result.totalRequests}`);
  console.log(`–ù–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: ${result.failedRequests}`);
  console.log(`–ó–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É: ${result.requestsPerSecond.toFixed(2)}`);
  console.log(`\n–ó–∞–¥–µ—Ä–∂–∫–∞ (ms):`);
  console.log(`  –°—Ä–µ–¥–Ω—è—è: ${result.meanLatency.toFixed(2)}`);
  console.log(`  50%: ${result.p50Latency}`);
  console.log(`  90%: ${result.p90Latency}`);
  console.log(`  99%: ${result.p99Latency}`);
  
  if (result.throughput > 0) {
    console.log(`\n–ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: ${result.throughput.toFixed(2)} KB/s`);
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º SLA
  if (config.sla) {
    console.log('\nüéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ SLA:');
    const slaResults = [];
    
    if (config.sla.maxMeanLatency && result.meanLatency > config.sla.maxMeanLatency) {
      slaResults.push(`‚ùå –°—Ä–µ–¥–Ω—è—è –∑–∞–¥–µ—Ä–∂–∫–∞ ${result.meanLatency}ms –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç ${config.sla.maxMeanLatency}ms`);
    } else if (config.sla.maxMeanLatency) {
      slaResults.push(`‚úÖ –°—Ä–µ–¥–Ω—è—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã`);
    }
    
    if (config.sla.maxP99Latency && result.p99Latency > config.sla.maxP99Latency) {
      slaResults.push(`‚ùå P99 –∑–∞–¥–µ—Ä–∂–∫–∞ ${result.p99Latency}ms –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç ${config.sla.maxP99Latency}ms`);
    } else if (config.sla.maxP99Latency) {
      slaResults.push(`‚úÖ P99 –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã`);
    }
    
    if (config.sla.minRequestsPerSecond && result.requestsPerSecond < config.sla.minRequestsPerSecond) {
      slaResults.push(`‚ùå RPS ${result.requestsPerSecond} –Ω–∏–∂–µ –º–∏–Ω–∏–º—É–º–∞ ${config.sla.minRequestsPerSecond}`);
    } else if (config.sla.minRequestsPerSecond) {
      slaResults.push(`‚úÖ RPS —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º`);
    }
    
    if (config.sla.maxErrorRate) {
      const errorRate = (result.failedRequests / result.totalRequests) * 100;
      if (errorRate > config.sla.maxErrorRate) {
        slaResults.push(`‚ùå –ü—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫ ${errorRate.toFixed(2)}% –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç ${config.sla.maxErrorRate}%`);
      } else {
        slaResults.push(`‚úÖ –ü—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã`);
      }
    }
    
    slaResults.forEach(r => console.log(`  ${r}`));
  }
}

// 3. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
async function monitorApiAvailability(config: ApiMonitorConfig) {
  console.log('\n=== –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API ===\n');
  
  const results = [];
  const startTime = Date.now();
  
  console.log('–ù–∞—á–∞—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.\n');
  
  while (Date.now() - startTime < config.duration * 1000) {
    const checkTime = new Date();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ endpoints
    const endpointResults = await Promise.all(
      config.endpoints.map(endpoint => checkEndpoint(endpoint, config))
    );
    
    const result = {
      timestamp: checkTime,
      checks: endpointResults,
      allHealthy: endpointResults.every(r => r.healthy)
    };
    
    results.push(result);
    
    // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç—É—Å
    displayMonitoringStatus(result);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª–µ—Ä—Ç—ã
    await checkAlerts(result, config);
    
    // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
    await new Promise(resolve => setTimeout(resolve, config.interval * 1000));
  }
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
  generateAvailabilityReport(results, config);
}

async function checkEndpoint(endpoint: ApiEndpoint, config: ApiMonitorConfig): Promise<EndpointCheck> {
  const url = `${config.baseUrl}${endpoint.path}`;
  const startTime = Date.now();
  
  try {
    // –í @xec-sh/core –Ω–µ—Ç within, –∏—Å–ø–æ–ª—å–∑—É–µ–º $.with() —Å timeout
    const $withTimeout = $.with({ timeout: endpoint.timeout || 5000 });
    const result = await $withTimeout`curl -s -o /dev/null -w "%{http_code}" ${url}`;
    
    const statusCode = parseInt(result.stdout.trim());
    const responseTime = Date.now() - startTime;
    
    const healthy = endpoint.expectedStatus 
      ? statusCode === endpoint.expectedStatus
      : statusCode >= 200 && statusCode < 400;
    
    return {
      endpoint: endpoint.name,
      url,
      healthy,
      statusCode,
      responseTime,
      error: null
    };
  } catch (error) {
    return {
      endpoint: endpoint.name,
      url,
      healthy: false,
      statusCode: 0,
      responseTime: Date.now() - startTime,
      error: error.message
    };
  }
}

function displayMonitoringStatus(result: MonitoringResult) {
  console.clear();
  console.log('=== –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API ===\n');
  console.log(`–í—Ä–µ–º—è: ${result.timestamp.toLocaleString()}`);
  console.log(`–°—Ç–∞—Ç—É—Å: ${result.allHealthy ? '‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç' : '‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã'}\n`);
  
  console.log('Endpoints:');
  result.checks.forEach(check => {
    const icon = check.healthy ? '‚úÖ' : '‚ùå';
    const status = check.healthy ? 'OK' : 'FAIL';
    console.log(`${icon} ${check.endpoint}: ${status} (${check.responseTime}ms)`);
    if (!check.healthy && check.error) {
      console.log(`   –û—à–∏–±–∫–∞: ${check.error}`);
    }
  });
}

async function checkAlerts(result: MonitoringResult, config: ApiMonitorConfig) {
  if (!config.alerts) return;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â–∏–π endpoint
  for (const check of result.checks) {
    if (!check.healthy) {
      await sendAlert({
        level: 'error',
        endpoint: check.endpoint,
        message: `Endpoint ${check.endpoint} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${check.error || `HTTP ${check.statusCode}`}`,
        timestamp: result.timestamp
      }, config.alerts);
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ–¥–ª–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
  for (const check of result.checks) {
    if (check.healthy && check.responseTime > (config.alerts.slowResponseThreshold || 1000)) {
      await sendAlert({
        level: 'warning',
        endpoint: check.endpoint,
        message: `Endpoint ${check.endpoint} –æ—Ç–≤–µ—á–∞–µ—Ç –º–µ–¥–ª–µ–Ω–Ω–æ: ${check.responseTime}ms`,
        timestamp: result.timestamp
      }, config.alerts);
    }
  }
}

async function sendAlert(alert: Alert, alertConfig: AlertConfig) {
  console.log(`\nüö® ${alert.level.toUpperCase()}: ${alert.message}\n`);
  
  // Webhook
  if (alertConfig.webhook) {
    try {
      await $`curl -X POST ${alertConfig.webhook} \
        -H "Content-Type: application/json" \
        -d '${JSON.stringify(alert)}'`;
    } catch {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ webhook');
    }
  }
  
  // Email (—á–µ—Ä–µ–∑ sendmail –∏–ª–∏ –¥—Ä—É–≥–æ–π MTA)
  if (alertConfig.email) {
    const emailBody = `
Subject: API Alert: ${alert.level}

Endpoint: ${alert.endpoint}
Time: ${alert.timestamp}
Message: ${alert.message}
`;
    
    try {
      await $`echo "${emailBody}" | sendmail ${alertConfig.email}`;
    } catch {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email');
    }
  }
}

// 4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ API
async function generateApiDocumentation(config: ApiDocConfig) {
  console.log('\n=== –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ API ===\n');
  
  let documentation: ApiDocumentation;
  
  switch (config.source) {
    case 'openapi':
      documentation = await parseOpenApiSpec(config.specPath);
      break;
    case 'postman':
      documentation = await parsePostmanCollection(config.specPath);
      break;
    case 'code':
      documentation = await parseCodeAnnotations(config.sourcePath);
      break;
    default:
      throw new Error(`Unsupported source: ${config.source}`);
  }
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—ã—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã
  for (const format of config.outputFormats) {
    switch (format) {
      case 'markdown':
        await generateMarkdownDocs(documentation, config.outputPath);
        break;
      case 'html':
        await generateHtmlDocs(documentation, config.outputPath);
        break;
      case 'pdf':
        await generatePdfDocs(documentation, config.outputPath);
        break;
    }
  }
  
  console.log(`\n‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ ${config.outputPath}`);
}

async function parseOpenApiSpec(specPath: string): Promise<ApiDocumentation> {
  console.log('üìñ –ü–∞—Ä—Å–∏–Ω–≥ OpenAPI —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏...');
  
  const spec = JSON.parse(await fs.readFile(specPath, 'utf-8'));
  
  const endpoints: ApiEndpointDoc[] = [];
  
  for (const [path, methods] of Object.entries(spec.paths || {})) {
    for (const [method, operation] of Object.entries(methods as any)) {
      if (['get', 'post', 'put', 'patch', 'delete'].includes(method)) {
        endpoints.push({
          path,
          method: method.toUpperCase(),
          summary: operation.summary || '',
          description: operation.description || '',
          parameters: operation.parameters || [],
          requestBody: operation.requestBody,
          responses: operation.responses || {},
          tags: operation.tags || []
        });
      }
    }
  }
  
  return {
    title: spec.info?.title || 'API Documentation',
    version: spec.info?.version || '1.0.0',
    description: spec.info?.description || '',
    baseUrl: spec.servers?.[0]?.url || '',
    endpoints,
    models: spec.components?.schemas || {}
  };
}

async function generateMarkdownDocs(doc: ApiDocumentation, outputPath: string) {
  console.log('üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Markdown –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏...');
  
  let markdown = `# ${doc.title}\n\n`;
  markdown += `Version: ${doc.version}\n\n`;
  markdown += `${doc.description}\n\n`;
  markdown += `Base URL: \`${doc.baseUrl}\`\n\n`;
  
  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–µ–≥–∞–º
  const endpointsByTag = new Map<string, ApiEndpointDoc[]>();
  
  doc.endpoints.forEach(endpoint => {
    const tags = endpoint.tags.length > 0 ? endpoint.tags : ['Other'];
    tags.forEach(tag => {
      if (!endpointsByTag.has(tag)) {
        endpointsByTag.set(tag, []);
      }
      endpointsByTag.get(tag)!.push(endpoint);
    });
  });
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ–≥–∞
  for (const [tag, endpoints] of endpointsByTag) {
    markdown += `## ${tag}\n\n`;
    
    for (const endpoint of endpoints) {
      markdown += `### ${endpoint.method} ${endpoint.path}\n\n`;
      
      if (endpoint.summary) {
        markdown += `${endpoint.summary}\n\n`;
      }
      
      if (endpoint.description) {
        markdown += `${endpoint.description}\n\n`;
      }
      
      // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
      if (endpoint.parameters.length > 0) {
        markdown += `**Parameters:**\n\n`;
        markdown += '| Name | In | Type | Required | Description |\n';
        markdown += '|------|-----|------|----------|-------------|\n';
        
        endpoint.parameters.forEach((param: any) => {
          markdown += `| ${param.name} | ${param.in} | ${param.schema?.type || 'string'} | ${param.required ? 'Yes' : 'No'} | ${param.description || ''} |\n`;
        });
        
        markdown += '\n';
      }
      
      // Request Body
      if (endpoint.requestBody) {
        markdown += `**Request Body:**\n\n`;
        markdown += '```json\n';
        markdown += JSON.stringify(endpoint.requestBody.content?.['application/json']?.example || {}, null, 2);
        markdown += '\n```\n\n';
      }
      
      // Responses
      markdown += `**Responses:**\n\n`;
      for (const [code, response] of Object.entries(endpoint.responses)) {
        markdown += `- **${code}**: ${(response as any).description || 'Response'}\n`;
        
        const example = (response as any).content?.['application/json']?.example;
        if (example) {
          markdown += '\n```json\n';
          markdown += JSON.stringify(example, null, 2);
          markdown += '\n```\n\n';
        }
      }
      
      markdown += '\n---\n\n';
    }
  }
  
  // –ú–æ–¥–µ–ª–∏
  if (Object.keys(doc.models).length > 0) {
    markdown += `## Models\n\n`;
    
    for (const [name, schema] of Object.entries(doc.models)) {
      markdown += `### ${name}\n\n`;
      markdown += '```json\n';
      markdown += JSON.stringify(schema, null, 2);
      markdown += '\n```\n\n';
    }
  }
  
  await fs.mkdir(outputPath, { recursive: true });
  await fs.writeFile(path.join(outputPath, 'api-docs.md'), markdown);
}

async function generateHtmlDocs(doc: ApiDocumentation, outputPath: string) {
  console.log('üåê –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏...');
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º swagger-ui –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
  const swaggerUiPath = path.join(outputPath, 'swagger-ui');
  await $`mkdir -p ${swaggerUiPath}`;
  
  // –°–∫–∞—á–∏–≤–∞–µ–º swagger-ui
  await $`curl -L https://github.com/swagger-api/swagger-ui/archive/master.tar.gz | tar xz -C ${swaggerUiPath} --strip-components=2 swagger-ui-master/dist`;
  
  // –°–æ–∑–¥–∞–µ–º spec.json
  const spec = {
    openapi: '3.0.0',
    info: {
      title: doc.title,
      version: doc.version,
      description: doc.description
    },
    servers: [{ url: doc.baseUrl }],
    paths: {},
    components: { schemas: doc.models }
  };
  
  // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º endpoints –æ–±—Ä–∞—Ç–Ω–æ –≤ OpenAPI —Ñ–æ—Ä–º–∞—Ç
  doc.endpoints.forEach(endpoint => {
    if (!spec.paths[endpoint.path]) {
      spec.paths[endpoint.path] = {};
    }
    spec.paths[endpoint.path][endpoint.method.toLowerCase()] = {
      summary: endpoint.summary,
      description: endpoint.description,
      parameters: endpoint.parameters,
      requestBody: endpoint.requestBody,
      responses: endpoint.responses,
      tags: endpoint.tags
    };
  });
  
  await fs.writeFile(
    path.join(swaggerUiPath, 'spec.json'),
    JSON.stringify(spec, null, 2)
  );
  
  // –û–±–Ω–æ–≤–ª—è–µ–º index.html
  const indexHtml = await fs.readFile(path.join(swaggerUiPath, 'index.html'), 'utf-8');
  const updatedHtml = indexHtml.replace(
    'url: "https://petstore.swagger.io/v2/swagger.json"',
    'url: "./spec.json"'
  );
  await fs.writeFile(path.join(swaggerUiPath, 'index.html'), updatedHtml);
}

// 5. API Security Testing
async function runSecurityTests(config: SecurityTestConfig) {
  console.log('\n=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ API ===\n');
  
  const results = [];
  
  // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTPS
  results.push(await testHttps(config.baseUrl));
  
  // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  results.push(await testSecurityHeaders(config.baseUrl));
  
  // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  results.push(await testAuthentication(config));
  
  // 4. SQL Injection —Ç–µ—Å—Ç—ã
  if (config.sqlInjectionTests) {
    results.push(await testSqlInjection(config));
  }
  
  // 5. XSS —Ç–µ—Å—Ç—ã
  if (config.xssTests) {
    results.push(await testXss(config));
  }
  
  // 6. Rate limiting —Ç–µ—Å—Ç—ã
  results.push(await testRateLimiting(config));
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
  generateSecurityReport(results);
}

async function testHttps(baseUrl: string): Promise<SecurityTestResult> {
  console.log('üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTPS...');
  
  const result: SecurityTestResult = {
    test: 'HTTPS',
    passed: false,
    findings: [],
    severity: 'high'
  };
  
  if (!baseUrl.startsWith('https://')) {
    result.findings.push('API –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç HTTPS');
    return result;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
  try {
    const sslCheck = await $`curl -I ${baseUrl} 2>&1 | grep -i "SSL certificate"`;
    result.passed = true;
    result.findings.push('HTTPS –≤–∫–ª—é—á–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
  } catch {
    result.findings.push('–ü—Ä–æ–±–ª–µ–º—ã —Å SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–º');
  }
  
  return result;
}

async function testSecurityHeaders(baseUrl: string): Promise<SecurityTestResult> {
  console.log('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...');
  
  const result: SecurityTestResult = {
    test: 'Security Headers',
    passed: true,
    findings: [],
    severity: 'medium'
  };
  
  const response = await $`curl -I ${baseUrl}`;
  const headers = response.stdout.toLowerCase();
  
  const requiredHeaders = [
    { name: 'X-Content-Type-Options', value: 'nosniff' },
    { name: 'X-Frame-Options', value: 'deny' },
    { name: 'X-XSS-Protection', value: '1; mode=block' },
    { name: 'Strict-Transport-Security', value: 'max-age=' },
    { name: 'Content-Security-Policy', value: null }
  ];
  
  for (const header of requiredHeaders) {
    const headerName = header.name.toLowerCase();
    if (!headers.includes(headerName)) {
      result.passed = false;
      result.findings.push(`–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ ${header.name}`);
    }
  }
  
  if (result.passed) {
    result.findings.push('–í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç');
  }
  
  return result;
}

async function testRateLimiting(config: SecurityTestConfig): Promise<SecurityTestResult> {
  console.log('‚è±Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limiting...');
  
  const result: SecurityTestResult = {
    test: 'Rate Limiting',
    passed: false,
    findings: [],
    severity: 'medium'
  };
  
  // –î–µ–ª–∞–µ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–¥—Ä—è–¥
  const requests = 100;
  const results = [];
  
  for (let i = 0; i < requests; i++) {
    const response = await $`curl -s -o /dev/null -w "%{http_code}" ${config.baseUrl}${config.endpoints[0]}`.nothrow();
    results.push(response.stdout.trim());
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ 429 —Å—Ç–∞—Ç—É—Å—ã
  const rateLimited = results.filter(code => code === '429').length;
  
  if (rateLimited > 0) {
    result.passed = true;
    result.findings.push(`Rate limiting —Ä–∞–±–æ—Ç–∞–µ—Ç (${rateLimited} –∏–∑ ${requests} –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã)`);
  } else {
    result.findings.push('Rate limiting –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
  }
  
  return result;
}

function generateSecurityReport(results: SecurityTestResult[]) {
  console.log('\nüìä –û—Ç—á–µ—Ç –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:\n');
  
  const passed = results.filter(r => r.passed).length;
  const total = results.length;
  
  console.log(`–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: ${passed}/${total}\n`);
  
  results.forEach(result => {
    const icon = result.passed ? '‚úÖ' : '‚ùå';
    console.log(`${icon} ${result.test}`);
    result.findings.forEach(finding => {
      console.log(`   - ${finding}`);
    });
  });
  
  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  const failedTests = results.filter(r => !r.passed);
  if (failedTests.length > 0) {
    console.log('\n‚ö†Ô∏è  –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:');
    
    if (failedTests.find(t => t.test === 'HTTPS')) {
      console.log('- –í–∫–ª—é—á–∏—Ç–µ HTTPS –¥–ª—è –≤—Å–µ—Ö API endpoints');
    }
    
    if (failedTests.find(t => t.test === 'Security Headers')) {
      console.log('- –î–æ–±–∞–≤—å—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏');
    }
    
    if (failedTests.find(t => t.test === 'Rate Limiting')) {
      console.log('- –ù–∞—Å—Ç—Ä–æ–π—Ç–µ rate limiting –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç DDoS');
    }
  }
}

// –£—Ç–∏–ª–∏—Ç—ã
function getJsonPath(obj: any, path: string): any {
  const parts = path.split('.');
  let current = obj;
  
  for (const part of parts) {
    if (current === null || current === undefined) {
      return undefined;
    }
    current = current[part];
  }
  
  return current;
}

function deepEqual(a: any, b: any): boolean {
  if (a === b) return true;
  if (typeof a !== typeof b) return false;
  if (typeof a !== 'object') return false;
  
  const keysA = Object.keys(a);
  const keysB = Object.keys(b);
  
  if (keysA.length !== keysB.length) return false;
  
  for (const key of keysA) {
    if (!deepEqual(a[key], b[key])) return false;
  }
  
  return true;
}

function validateJsonSchema(data: any, schema: any): boolean {
  // –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ö–µ–º—ã
  // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ ajv –∏–ª–∏ –¥—Ä—É–≥—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É
  return true;
}

function generateTestReport(results: TestResult[]) {
  console.log('\nüìã –û—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:');
  
  const passed = results.filter(r => r.passed).length;
  const failed = results.filter(r => !r.passed).length;
  
  console.log(`–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${results.length}`);
  console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passed}`);
  console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failed}`);
  
  if (failed > 0) {
    console.log('\n–ü—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã:');
    results.filter(r => !r.passed).forEach(test => {
      console.log(`\n‚ùå ${test.name}`);
      console.log(`   Endpoint: ${test.method} ${test.endpoint}`);
      if (test.error) {
        console.log(`   –û—à–∏–±–∫–∞: ${test.error}`);
      }
      test.assertions.filter(a => !a.passed).forEach(assertion => {
        console.log(`   - ${assertion.message}`);
      });
    });
  }
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
  const responseTimes = results
    .filter(r => r.response?.time)
    .map(r => r.response!.time);
  
  if (responseTimes.length > 0) {
    const avgTime = responseTimes.reduce((a, b) => a + b, 0) / responseTimes.length;
    const maxTime = Math.max(...responseTimes);
    const minTime = Math.min(...responseTimes);
    
    console.log('\n‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:');
    console.log(`  –°—Ä–µ–¥–Ω–µ–µ: ${avgTime.toFixed(2)}ms`);
    console.log(`  –ú–∏–Ω: ${minTime}ms`);
    console.log(`  –ú–∞–∫—Å: ${maxTime}ms`);
  }
}

async function saveTestResults(results: TestResult[], resultsPath: string) {
  const report = {
    timestamp: new Date().toISOString(),
    summary: {
      total: results.length,
      passed: results.filter(r => r.passed).length,
      failed: results.filter(r => !r.passed).length
    },
    results
  };
  
  await fs.mkdir(path.dirname(resultsPath), { recursive: true });
  await fs.writeFile(resultsPath, JSON.stringify(report, null, 2));
  
  console.log(`\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ ${resultsPath}`);
}

function generateAvailabilityReport(results: MonitoringResult[], config: ApiMonitorConfig) {
  console.log('\n\nüìä –û—Ç—á–µ—Ç –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏:\n');
  
  const totalChecks = results.length * config.endpoints.length;
  const failedChecks = results.flatMap(r => r.checks).filter(c => !c.healthy).length;
  const availability = ((totalChecks - failedChecks) / totalChecks) * 100;
  
  console.log(`–ü–µ—Ä–∏–æ–¥ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: ${config.duration}—Å`);
  console.log(`–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: ${totalChecks}`);
  console.log(`–£—Å–ø–µ—à–Ω—ã—Ö: ${totalChecks - failedChecks}`);
  console.log(`–ù–µ—É–¥–∞—á–Ω—ã—Ö: ${failedChecks}`);
  console.log(`–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: ${availability.toFixed(2)}%`);
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ endpoints
  console.log('\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ endpoints:');
  
  const endpointStats = new Map<string, { success: number; failed: number; avgTime: number }>();
  
  results.forEach(result => {
    result.checks.forEach(check => {
      if (!endpointStats.has(check.endpoint)) {
        endpointStats.set(check.endpoint, { success: 0, failed: 0, avgTime: 0 });
      }
      
      const stats = endpointStats.get(check.endpoint)!;
      if (check.healthy) {
        stats.success++;
      } else {
        stats.failed++;
      }
      stats.avgTime += check.responseTime;
    });
  });
  
  endpointStats.forEach((stats, endpoint) => {
    const total = stats.success + stats.failed;
    const availability = (stats.success / total) * 100;
    const avgTime = stats.avgTime / total;
    
    console.log(`\n${endpoint}:`);
    console.log(`  –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: ${availability.toFixed(2)}%`);
    console.log(`  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${avgTime.toFixed(0)}ms`);
  });
}

// –¢–∏–ø—ã
interface ApiTestConfig {
  baseUrl: string;
  tests: ApiTest[];
  defaultHeaders?: Record<string, string>;
  auth?: {
    type: 'bearer' | 'basic';
    token?: string;
    username?: string;
    password?: string;
  };
  saveResults?: boolean;
  resultsPath?: string;
  failOnError?: boolean;
}

interface ApiTest {
  name: string;
  endpoint: string;
  method: string;
  headers?: Record<string, string>;
  body?: any;
  assertions: ApiAssertion[];
}

interface ApiAssertion {
  type: 'status' | 'responseTime' | 'jsonPath' | 'schema';
  expected?: any;
  path?: string;
  schema?: any;
}

interface TestResult {
  name: string;
  endpoint: string;
  method: string;
  passed: boolean;
  duration: number;
  response?: {
    statusCode: number;
    body: any;
    time: number;
  };
  assertions: AssertionResult[];
  error: string | null;
}

interface AssertionResult {
  type: string;
  expected: any;
  actual: any;
  passed: boolean;
  message: string;
}

interface LoadTestConfig {
  url: string;
  method?: string;
  headers?: Record<string, string>;
  body?: any;
  users: number;
  duration: number;
  sla?: {
    maxMeanLatency?: number;
    maxP99Latency?: number;
    minRequestsPerSecond?: number;
    maxErrorRate?: number;
  };
}

interface LoadTestResult {
  tool: string;
  totalRequests: number;
  failedRequests: number;
  requestsPerSecond: number;
  meanLatency: number;
  p50Latency: number;
  p90Latency: number;
  p99Latency: number;
  throughput: number;
  raw: string;
}

interface ApiMonitorConfig {
  baseUrl: string;
  endpoints: ApiEndpoint[];
  interval: number; // —Å–µ–∫—É–Ω–¥—ã
  duration: number; // —Å–µ–∫—É–Ω–¥—ã
  alerts?: AlertConfig;
}

interface ApiEndpoint {
  name: string;
  path: string;
  expectedStatus?: number;
  timeout?: number;
}

interface EndpointCheck {
  endpoint: string;
  url: string;
  healthy: boolean;
  statusCode: number;
  responseTime: number;
  error: string | null;
}

interface MonitoringResult {
  timestamp: Date;
  checks: EndpointCheck[];
  allHealthy: boolean;
}

interface AlertConfig {
  webhook?: string;
  email?: string;
  slowResponseThreshold?: number;
}

interface Alert {
  level: 'error' | 'warning';
  endpoint: string;
  message: string;
  timestamp: Date;
}

interface ApiDocConfig {
  source: 'openapi' | 'postman' | 'code';
  specPath?: string;
  sourcePath?: string;
  outputPath: string;
  outputFormats: Array<'markdown' | 'html' | 'pdf'>;
}

interface ApiDocumentation {
  title: string;
  version: string;
  description: string;
  baseUrl: string;
  endpoints: ApiEndpointDoc[];
  models: Record<string, any>;
}

interface ApiEndpointDoc {
  path: string;
  method: string;
  summary: string;
  description: string;
  parameters: any[];
  requestBody?: any;
  responses: Record<string, any>;
  tags: string[];
}

interface SecurityTestConfig {
  baseUrl: string;
  endpoints: string[];
  sqlInjectionTests?: boolean;
  xssTests?: boolean;
}

interface SecurityTestResult {
  test: string;
  passed: boolean;
  findings: string[];
  severity: 'low' | 'medium' | 'high' | 'critical';
}

// –≠–∫—Å–ø–æ—Ä—Ç
export {
  runApiTests,
  runLoadTest,
  runSecurityTests,
  monitorApiAvailability,
  generateApiDocumentation
};